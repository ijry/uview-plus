import{_ as t,c as n,w as e,i as a,r as s,bu as i,a as l,q as r,o,g as m,m as u,n as _}from"./index-DBPJq-VR.js";const g=t({data:()=>({basicContent:"# 标题1\n这是段落文本，包含**粗体**和*斜体*文本。\n\n## 标题2\n这是一个链接：[uview-plus](https://ijry.github.io/uview-plus)\n\n### 列表示例\n- 列表项1\n- 列表项2\n- 列表项3\n\n> 这是一个引用块\n\n---\n\n段落中的行内代码： `console.log('Hello World')`",codeContent:"# 代码示例\n\n以下是一个JavaScript函数：\n\n```javascript\nfunction hello(name) {\n    console.log('Hello, ' + name + '!');\n}\n\nhello('World');\n```\n\n以下是一个Python示例：\n\n```python\ndef hello(name):\n    print(f\"Hello, {name}!\")\n\nhello(\"World\")\n```",fullAIContent:"# AI助手回答\n\n你好！我是AI助手，正在为你逐步生成回答内容...\n\n## 问题分析\n\n让我来分析你提出的问题：\n\n1. 需要实现流式内容显示\n2. 模拟AI逐步输出文字的效果\n3. 使用定时器控制内容显示速度\n\n## 解决方案\n\n我们可以使用以下方法实现：\n\n### 第一步：创建数据模型\n```javascript\ndata() {\n  return {\n    streamingContent: '',\n    isStreaming: false,\n    streamTimer: null\n  }\n}\n```\n\n### 第二步：实现流式显示逻辑\n```javascript\nmethods: {\n  startStreaming() {\n    // 实现流式显示逻辑\n  }\n}\n```\n\n## 总结\n\n以上就是实现流式内容显示的基本方法。通过定时器控制内容逐字显示，可以营造出AI正在思考和逐步输出的效果。\n\n这种交互方式在现代Web应用中非常常见，特别是在AI助手类产品中。\n\n---\n\n*内容生成完毕*",streamingContent:"",isStreaming:!1,streamTimer:null,streamIndex:0}),methods:{toggleStreaming(){this.isStreaming?this.stopStreaming():this.startStreaming()},startStreaming(){this.isStreaming||(this.streamIndex>=this.fullAIContent.length&&(this.streamIndex=0,this.streamingContent=""),this.isStreaming=!0,this.streamTimer=setInterval(()=>{this.streamIndex<this.fullAIContent.length?(this.streamingContent+=this.fullAIContent[this.streamIndex],this.streamIndex++):this.stopStreaming()},50))},stopStreaming(){this.streamTimer&&(clearInterval(this.streamTimer),this.streamTimer=null),this.isStreaming=!1},resetStreaming(){this.stopStreaming(),this.streamingContent="",this.streamIndex=0}},beforeDestroy(){this.stopStreaming()}},[["render",function(t,g,c,d,h,p){const f=u,I=s(l("up-markdown"),i),S=a,C=s(l("up-button"),r);return o(),n(S,{class:"u-page"},{default:e(()=>[m(S,{class:"u-page__item"},{default:e(()=>[m(f,{class:"u-page__item__title",style:{"margin-top":"0"}},{default:e(()=>[_("基础用法")]),_:1}),m(S,{class:"u-page__item__content"},{default:e(()=>[m(I,{content:h.basicContent},null,8,["content"])]),_:1})]),_:1}),m(S,{class:"u-page__item"},{default:e(()=>[m(f,{class:"u-page__item__title"},{default:e(()=>[_("带代码块行号")]),_:1}),m(S,{class:"u-page__item__content"},{default:e(()=>[m(I,{content:h.codeContent,"show-line-number":!0},null,8,["content"])]),_:1})]),_:1}),m(S,{class:"u-page__item"},{default:e(()=>[m(f,{class:"u-page__item__title"},{default:e(()=>[_("深色主题")]),_:1}),m(S,{class:"u-page__item__content"},{default:e(()=>[m(I,{content:h.basicContent,theme:"dark"},null,8,["content"])]),_:1})]),_:1}),m(S,{class:"u-page__item"},{default:e(()=>[m(f,{class:"u-page__item__title"},{default:e(()=>[_("AI流式内容显示")]),_:1}),m(S,{class:"u-page__item__content"},{default:e(()=>[m(I,{content:h.streamingContent,"show-line-number":!0},null,8,["content"]),m(S,{style:{"flex-direction":"row","margin-top":"10px"}},{default:e(()=>[m(C,{type:"primary",size:"mini",text:h.isStreaming?"停止":"开始",onClick:p.toggleStreaming,style:{"margin-right":"10px"}},null,8,["text","onClick"]),m(C,{type:"default",size:"mini",text:"重置",onClick:p.resetStreaming},null,8,["onClick"])]),_:1})]),_:1})]),_:1})]),_:1})}],["__scopeId","data-v-7caae9db"]]);export{g as default};
