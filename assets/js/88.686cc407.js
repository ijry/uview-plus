(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{536:function(t,n,i){},644:function(t,n,i){"use strict";i(536)},676:function(t,n,i){"use strict";i.r(n);var a=i(421),o=i.n(a),e={name:"githubContributionList",props:{owner:{type:String,default:"ijry"},repo:{type:String,default:"uview-plus"}},methods:{open:function(t){window.open(t.html_url,"_blank")}},data:function(){return{tableData:[]}},created:function(){var t=this;o.a.get("https://api.github.com/repos/".concat(this.owner,"/").concat(this.repo,"/contributors")).then((function(n){t.tableData=n.data}))}},s=(i(644),i(18)),c=Object(s.a)(e,(function(){var t=this,n=t._self._c;return n("el-row",{staticClass:"row"},t._l(t.tableData,(function(i,a){return n("el-col",{key:a,staticClass:"col",attrs:{span:80}},[n("el-card",{attrs:{shadow:"hover","body-style":{padding:"0px"}},nativeOn:{click:function(n){return t.open(i)}}},[n("el-image",{staticStyle:{width:"100px",height:"100px"},attrs:{src:i.avatar_url,fit:"fill"}}),t._v(" "),n("div",{staticStyle:{padding:"14px"}},[n("div",{staticClass:"login"},[t._v(t._s(i.login))]),t._v(" "),n("div",{staticClass:"bottom clearfix"},[n("div",{staticClass:"count"},[t._v(t._s(i.contributions)+" commit")])])])],1)],1)})),1)}),[],!1,null,"79940c62",null);n.default=c.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,